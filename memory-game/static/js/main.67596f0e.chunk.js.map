{"version":3,"sources":["svgs/supercharge-logo.svg","components/DeckSelector.js","components/Header.js","components/StartScreen.js","components/Card.js","components/Scoreboard.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DeckSelector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deckSize","React","createRef","handleSubmit","bind","assertThisInitialized","handleChange","state","value","event","setState","target","preventDefault","startGame","current","react_default","a","createElement","onSubmit","className","type","htmlFor","ref","onChange","Component","Header","toggleMenu","isMenuActive","renderDeckSelector","isGameStart","Fragment","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","id","components_DeckSelector","src","logo","width","height","alt","resetGame","StartScreen","Card","handleClick","card","status","flipCard","index","console","log","_this$props$card","concat","Scoreboard","currentScore","highScore","isMatching","cards","selectedCards","changeStatusOfSelected","newStatus","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","CARDS","STATUS","SELECTED","UNSELECTED","REMOVED","App","checkMatch","isWin","alert","winTest","reduce","accumlator","currentValue","renderApp","components_Scoreboard","keys","length","map","key","components_Card","components_StartScreen","locked","multipliedCards","filteredCards","slice","filterCards","shuffled","_shuffle","_this2","_concat","setTimeout","build_default","parent","components_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67596f0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/supercharge-logo.0a42ff00.svg\";","import React from \"react\";\n\nclass DeckSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n        this.state = {\n            value: 3\n        };\n    }\n\n    deckSize = React.createRef();\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        //let's start the game\n        this.props.startGame(this.deckSize.current.value);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} className={this.props.type}>\n                <label htmlFor=\"deck-size\">Deck size:</label>\n                <select ref={this.deckSize} value={this.state.value} onChange={this.handleChange}>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"10\">10</option>\n                </select>\n                <button type=\"submit\" className=\"btn-primary btn start-game-btn\">Start New Game</button>\n            </form>\n        )\n    }\n}\n\nexport default DeckSelector;\n","import React from 'react';\nimport logo from '../svgs/supercharge-logo.svg';\nimport DeckSelector from \"./DeckSelector\";\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isMenuActive: false\n        }\n    }\n\n    toggleMenu = () => {\n        const isMenuActive = !this.state.isMenuActive;\n        this.setState({isMenuActive});\n    };\n\n    renderDeckSelector = () => {\n        if (this.props.isGameStart) {\n            let className = 'navbar-collapse';\n            if (!this.state.isMenuActive) {\n                className += ' collapse';\n            }\n\n            return (\n                <React.Fragment>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                            data-target=\"#navbarToggler\"\n                            aria-controls=\"navbarToggler\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\n                            onClick={this.toggleMenu}>\n                        <span className=\"navbar-toggler-icon\"/>\n                    </button>\n                    <div className={className} id=\"navbarToggler\">\n                        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-2\">\n                            <li className=\"nav-item active\">\n                                <DeckSelector type=\"header-deck-size\" startGame={this.props.startGame}/>\n                            </li>\n                        </ul>\n                    </div>\n                </React.Fragment>\n            )\n        }\n    };\n\n    render() {\n        return (\n            <header>\n                <nav className=\"navbar navbar-dark bg-dark navbar-expand-md\">\n                    <span className=\"navbar-brand\">\n                        <img src={logo} width=\"30\" height=\"30\"\n                             className=\"d-inline-block align-top logo\"\n                             alt=\"Restart game\"\n                             onClick={this.props.resetGame}\n                        />\n                        Memory game\n                    </span>\n                    {this.renderDeckSelector()}\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default Header;\n","import React from \"react\";\nimport DeckSelector from \"./DeckSelector\";\n\nconst StartScreen = props => (\n    <div className=\"start-game\">\n        <div className=\"container\">\n            <h1 className=\"company-title\">Supercharge</h1>\n            <h2 className=\"game-name\">Memory Game</h2>\n            <DeckSelector type=\"start-deck-size\" startGame={props.startGame}/>\n        </div>\n    </div>\n);\n\nexport default StartScreen;\n","import React from \"react\";\n\nclass Card extends React.Component {\n\n    handleClick = () => {\n        //just unselected items can be flip\n        if (this.props.card.status === 'unselected') {\n            this.props.flipCard(this.props.index);\n        } else {\n            console.log('just unselected items can be flip, status: ' + this.props.card.status);\n        }\n    };\n\n    render() {\n        const {type, status} = this.props.card;\n        return (\n            <div onClick={this.handleClick}\n                 className={`card card--${status}`}>\n                <div className=\"card-container\">\n                    <div className=\"card-face card-front\">\n                    </div>\n                    <div className=\"card-face card-back\">\n                        <img className=\"card-img\" alt=\"\" src={(`./img/${type}.png`)} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;\n","import React from 'react';\n\nconst Scoreboard = props => (\n    <div className=\"scoreboard container\">\n        <div className=\"row\">\n            <span className=\"col-4 align-middle\"><span className=\"current-tries\">Current tries:</span> {props.currentScore}</span>\n            <span className=\"col-4 align-middle text-center best-score\">Best <br/><span className=\"best-value\">{props.highScore}</span></span>\n            <div className=\"col-4 align-middle text-right\">\n                <button className=\"btn btn-outline-dark\" onClick={() => props.startGame()}>Restart</button>\n            </div>\n        </div>\n    </div>\n);\n\nexport default Scoreboard;\n","/**\n * Filtered and duplicate cards\n * @param cards - All available cards\n * @param deckSize - deckSize\n * @returns {Array|*|T[]|string}\n */\nexport const filterCards = (cards, deckSize) => {\n    let filteredCards = cards.slice(0, deckSize);\n    return filteredCards.concat(filteredCards);\n};\n\n/**\n * Check two selected cards mathing\n * @param cards\n * @param selectedCards\n * @returns {boolean}\n */\nexport const isMatching = (cards, selectedCards) => {\n    return cards[selectedCards[0]].type === cards[selectedCards[1]].type\n};\n\n/**\n * Update the selected cards status\n * @param cards\n * @param selectedCards\n * @param newStatus\n * @returns {*}\n */\nexport const changeStatusOfSelected = (cards, selectedCards, newStatus) => {\n    for (let value of selectedCards) {\n        cards[value].status = newStatus;\n    }\n    return cards;\n};\n","import React, {Component} from 'react';\n\nimport SimpleStorage from \"react-simple-storage\";\n\nimport Header from \"./components/Header\";\nimport StartScreen from \"./components/StartScreen\";\nimport Card from \"./components/Card\";\n\nimport _shuffle from 'lodash/shuffle';\nimport _concat from 'lodash/concat';\n\nimport './scss/App.scss';\nimport Scoreboard from \"./components/Scoreboard\";\nimport {changeStatusOfSelected, filterCards, isMatching} from \"./helpers\";\n\nconst CARDS = ['angular', 'd3', 'jenkins', 'postcss', 'react', 'redux', 'sass', 'supercharge', 'ts', 'webpack'];\n\nconst TIME_OUT_DELAY = 800;\n\nconst STATUS = {\n    SELECTED: 'selected',\n    UNSELECTED: 'unselected',\n    REMOVED: 'removed'\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cards: [],\n            selectedCards: [],\n            isGameStart: 0,\n            highScore: 14, //just sample\n            currentScore: 0,\n            locked: false\n        };\n\n        this.startGame = this.startGame.bind(this);\n        this.resetGame = this.resetGame.bind(this);\n        this.flipCard = this.flipCard.bind(this);\n    }\n\n\n    // Start game\n    startGame(deckSize) {\n        console.log(deckSize);\n\n        let multipliedCards = filterCards(CARDS, deckSize || Object.keys(this.state.cards).length / 2);\n        console.log(multipliedCards);\n\n        let shuffled = _shuffle(multipliedCards);\n        console.log(shuffled);\n\n        let cards = shuffled.map(function (value) {\n            return {\n                type: value,\n                status: STATUS.UNSELECTED\n            }\n        });\n\n        console.log(cards);\n\n        this.setState({\n            cards: cards,\n            selectedCards: [],\n            isGameStart: 1,\n            currentScore: 0,\n            locked: false\n        });\n    }\n\n    /**\n     * Reseting the game\n     */\n    resetGame() {\n        this.setState({\n                cards: [],\n                selectedCards: [],\n                isGameStart: 0\n            }\n        )\n    }\n\n    /**\n     * Flipping cards\n     * @param index\n     */\n    flipCard(index) {\n        if (this.state.locked) {\n            console.log('locked, try later');\n            return\n        }\n\n        let selectedCards = _concat(this.state.selectedCards, index);\n        console.log(selectedCards);\n\n        let cards = this.state.cards;\n        console.log(cards);\n\n        cards[selectedCards[selectedCards.length - 1]].status = STATUS.SELECTED;\n\n        if (selectedCards.length > 1) {\n            this.setState({\n                cards,\n                locked: true\n            });\n\n            setTimeout(() => {\n                cards = this.checkMatch(cards, selectedCards);\n                selectedCards = [];\n                const currentScore = this.state.currentScore + 1;\n\n                this.setState({\n                    selectedCards,\n                    cards,\n                    currentScore,\n                    locked: false\n                });\n\n            }, TIME_OUT_DELAY);\n\n        } else {\n            //First card\n            this.setState({\n                selectedCards,\n                cards\n            })\n        }\n    }\n\n    checkMatch = (cards, selectedCards) => {\n        console.log(cards, selectedCards);\n        if (isMatching(cards, selectedCards)) {\n            console.log('match');\n            changeStatusOfSelected(cards, selectedCards, STATUS.REMOVED);\n            if (this.isWin(cards)) {\n                alert('your winner! :)');\n                if (this.state.highScore > this.state.currentScore) {\n                    this.setState({\n                        highScore: this.state.currentScore\n                    })\n                }\n            }\n        } else {\n            console.log('no match');\n            changeStatusOfSelected(cards, selectedCards, STATUS.UNSELECTED)\n        }\n        return cards;\n    };\n\n    isWin = (cards) => {\n        console.log(cards);\n        let winTest = cards.reduce(function (accumlator, currentValue) {\n            console.log(accumlator, currentValue);\n            if (accumlator === currentValue.status) {\n                return accumlator;\n            } else {\n                return false;\n            }\n        }, STATUS.REMOVED);\n        console.log(winTest);\n        return winTest;\n    };\n\n\n    renderApp = () => {\n        if (!this.state.isGameStart) {\n            return (\n                <StartScreen startGame={this.startGame}/>\n            )\n        }\n        return (\n            <React.Fragment>\n                <Scoreboard startGame={this.startGame} currentScore={this.state.currentScore}\n                            highScore={this.state.highScore}/>\n                <div className=\"card-container\">\n                    <div className={`cards cards-column-${Object.keys(this.state.cards).length / 2}`}>\n                        {Object.keys(this.state.cards).map(key => (\n                            <Card key={`card-${key}`}\n                                  index={key}\n                                  flipCard={this.flipCard}\n                                  card={this.state.cards[key]}/>\n                        ))}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <SimpleStorage parent={this} />\n                <Header startGame={this.startGame} isGameStart={this.state.isGameStart} resetGame={this.resetGame}/>\n                {this.renderApp()}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}